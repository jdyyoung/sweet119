//-------------------------------------------
//确保前面准备工作完成
mkdir build//在源码avs-device-sdk路径，同级路径创建build文件夹
cd build 

cmake /home/young/sugr/avs-device-sdk -DCMAKE_BUILD_TYPE=DEBUG

cmake /home/young/sugr/avs-device-sdk -DSENSORY_KEY_WORD_DETECTOR=ON -DSENSORY_KEY_WORD_DETECTOR_LIB_PATH=/home/young/sugr/avs-device-sdk-build/alexa-rpi/lib/libsnsr.a -DSENSORY_KEY_WORD_DETECTOR_INCLUDE_DIR=/home/young/sugr/avs-device-sdk-build/alexa-rpi/include

cmake /home/young/sugr/avs-device-sdk -DGSTREAMER_MEDIA_PLAYER=ON -DCMAKE_PREFIX_PATH=/usr/local/lib/

cmake /home/young/sugr/avs-device-sdk -DPORTAUDIO=ON -DPORTAUDIO_LIB_PATH=/home/young/Downloads/_install/lib
libportaudio.a -DPORTAUDIO_INCLUDE_DIR=/home/young/Downloads/_install/include/



//-------------------------------------------

Create an Out-of-Source Build:

cmake /home/young/sugr/avs-device-sdk -DCMAKE_BUILD_TYPE=DEBUG -g
cmake /home/young/sugr/avs-device-sdk -DCMAKE_BUILD_TYPE=RELEASE -02/-g
cmake /home/young/sugr/avs-device-sdk -DCMAKE_BUILD_TYPE=MINSIZEREL -0 s


//-------------------Build with a Wake Word Detector---------------------
cmake /home/young/sugr/avs-device-sdk -DSENSORY_KEY_WORD_DETECTOR=ON -DSENSORY_KEY_WORD_DETECTOR_LIB_PATH=/home/young/sugr/avs-device-sdk-build/alexa-rpi/lib/libsnsr.a -DSENSORY_KEY_WORD_DETECTOR_INCLUDE_DIR=/home/young/sugr/avs-device-sdk-build/alexa-rpi/include

Note that you may need to license the Sensory library for use prior to running cmake and building it into the SDK. A script to license the Sensory library can be found on the Sensory Github page under bin/license.sh.
证书？？

Unknown CMake command "asdk_install".
处理：是指源码路径

//---------------------Build with an implementation of MediaPlayer-------------------
~/sugr/avs-device-sdk$sudo find / -name "gstreamer-1.0"
/home/young/.cache/gstreamer-1.0
/usr/lib/x86_64-linux-gnu/bak/gstreamer1.0/gstreamer-1.0
/usr/lib/x86_64-linux-gnu/bak/gstreamer-1.0
/usr/local/share/gtk-doc/html/gstreamer-1.0
/usr/local/share/gstreamer-1.0
/usr/local/lib/gstreamer-1.0
/usr/local/include/gstreamer-1.0
/usr/local/libexec/gstreamer-1.0
find: `/run/user/1000/gvfs': 权限不够
/var/lib/lightdm/.cache/gstreamer-1.0

cmake /home/young/sugr/avs-device-sdk -DGSTREAMER_MEDIA_PLAYER=ON -DCMAKE_PREFIX_PATH=/usr/local/lib/

CMake Error at src/CMakeLists.txt:20 (asdk_install):
  Unknown CMake command "asdk_install".


//----------------Build with PortAudio (Required to Run the Sample App)---------------------
cmake /home/young/sugr/avs-device-sdk -DPORTAUDIO=ON -DPORTAUDIO_LIB_PATH=/usr/local/lib/libportaudio.a -DPORTAUDIO_INCLUDE_DIR=/usr/local/include/




//---------------------------Build for Generic Linux / macOS-------------------------------------
cd /home/young/sugr/build
cmake /home/young/sugr/avs-device-sdk/
修改好Json文件
	注意：设备系列号deviceSerialNumber是
make

Application Settings:
Integration/AlexaClientSDKConfig.json

注册完：
改Json
//-----------------------------------------------------------------------------------------------------------------------
Run AuthServer
After you've created your out-of-source build, the next step is to run AuthServer to retrieve a valid refresh token from LWA.
在创建了您的外源构建之后，下一步是运行AuthServer，从LWA检索一个有效的刷新令牌。
	开始运行AurhServer：
	python AuthServer/AuthServer.py
	
	You should see a message that indicates the server is running.

    Open your favorite browser and navigate to: http://localhost:3000
    Follow the on-screen instructions.
    After you've entered your credentials, the server should terminate itself, and Integration/AlexaClientSDKConfig.json will be populated with your refresh token.
    Before you proceed, it's important that you make sure the refresh token is in Integration/AlexaClientSDKConfig.json.

//------------------------------------------------------------------------------------------------------------------	
Run Unit test
	Unit tests for the AVS Device SDK for C++ use the Google Test framework.
	Ensure that the Google Test is installed, then run the following command: 
	make all test

	Ensure that all tests are passed before you begin integration testing.

	Run Unit Tests with Sensory Enabled
//-------------------------------------------------------------------------------------------------------------
Run Integration Tests !!!!
	所有对AVS的请求需要授权认证。
	集成测试需要设置系统时间为UTC.

	重要：AlexaClientSDKConfig.json必须创建它。
	TZ=UTC

Network Integration Test：
	如果项目被构建在一个GNU/Linux-based平台（Ubuntu，Debian，etc），有一个可选的集成测试，它测试ACL在慢网络上使用。要启用这个测试，请:
	cmake /home/young/sugr/avs-device-sdk -DNETWORK_INTEGRATION_TESTS=ON –DNETWORK_INTERFACE=wlp3s0
	注意：ifconfign -a 查看当前网络接口名
	重要：测试请求需要root权限

Run Integration Tests with Sensory Enabled：
If the project was built with the Sensory wake word detector, the following files must be downloaded from GitHub and placed in <source dir>/Integration/inputs/SensoryModels for the integration tests to run properly:

下载spot-alexa-rpi-31000.snsr文件到<source dir>/Integration/inputs/SensoryModels 

Run the Sample App：
注意：PortAudio和GStreamer必须已经被构建完成。

在运行示例应用程序之前，需要注意的是，应用程序需要两个参数。第一个是必须的，AlexaClientSDKConfig.json的路径;

如果构建示例应用是带有唤醒词，第二个参数是需要的，是包含唤醒词引擎模型的文件夹的路径。//SampleAPP/src

TZ=UTC ./SampleApp /home/young/sugr/build/Integration/AlexaClientSDKConfig.json  DEBUG9
注意：log-level：DEBUG9, DEBUG8, DEBUG7, DEBUG6, DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, DEBUG0, INFO, WARN, ERROR, and CRITICAL.

重要：在启动实例应用程序之后，在发出第一个请求之前，您必须等待几秒钟才能加载该应用程序。

//--------------------------------------------------------------------------------------------------------------------
Install the AVS Device SDK：
cd /home/young/sugr/build
cmake /home/young/sugr/avs-device-sdk -DCMAKE_INSTALL_PREFIX=/home/young/sugr/build
cmake
make install
库文件和头文件将被安装到指定的路径。另外地，AlexaClientSDK.pc 被生成并可用于支持pkg-config的系统。

要使用SDK构建应用程序，必须将安装的前缀路径指定为

cmake -DCMAKE_PREFIX_PATH=<absolute-path-to-install> 

NOTE: You may need to specify the rpath to link the SDK to your application.
NOTE: In your application, you will need to add the include path to RapidJSON.

AVS Device SDK for C++ API Documentation
To build API documentation locally, run this command from your build directory: make doc.

	
	


